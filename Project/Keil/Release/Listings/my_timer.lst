C51 COMPILER V9.60.7.0   MY_TIMER                                                          09/08/2025 11:42:23 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MY_TIMER
OBJECT MODULE PLACED IN .\Release\Objects\my_timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\my_timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) I
                    -NCDIR(..\..\Libraries\Include;..\..\User) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\my_timer.lst) OBJECT(.
                    -\Release\Objects\my_timer.obj)

line level    source

   1          #include "include.h"
   2          #include "main.h"
   3          
   4          // 1ms
   5          void timer0_init()
   6          {
   7   1          __EnableIRQ(TMR0_IRQn); // ‰ΩøËÉΩtimer0‰∏≠Êñ≠
   8   1          IE_EA = 1;              // ‰ΩøËÉΩÊÄª‰∏≠Êñ≠
   9   1      
  10   1      #define PEROID_VAL (SYSCLK / 128 / 1000 - 1) // Âë®ÊúüÂÄº=Á≥ªÁªüÊó∂Èíü/ÂàÜÈ¢ë/È¢ëÁéá - 1
  11   1          // ËÆæÁΩÆtimer0ÁöÑËÆ°Êï∞ÂäüËÉΩÔºåÈÖçÁΩÆ‰∏Ä‰∏™È¢ëÁéá‰∏∫1kHzÁöÑ‰∏≠Êñ≠
  12   1          TMR_ALLCON = TMR0_CNT_CLR(0x1);                        // Ê∏ÖÈô§ËÆ°Êï∞ÂÄº
  13   1          TMR0_PRH = TMR_PERIOD_VAL_H((PEROID_VAL >> 8) & 0xFF); // Âë®ÊúüÂÄº
  14   1          TMR0_PRL = TMR_PERIOD_VAL_L((PEROID_VAL >> 0) & 0xFF);
  15   1          TMR0_CONH = TMR_PRD_PND(0x1) | TMR_PRD_IRQ_EN(0x1);                          // ËÆ°Êï∞Á≠â‰∫éÂë®ÊúüÊó∂Â
             -ÖÅËÆ∏ÂèëÁîü‰∏≠Êñ≠
  16   1          TMR0_CONL = TMR_SOURCE_SEL(0x7) | TMR_PRESCALE_SEL(0x7) | TMR_MODE_SEL(0x1); // ÈÄâÊã©Á≥ªÁªüÊó∂ÈíüÔºå1
             -28ÂàÜÈ¢ëÔºåËÆ°Êï∞Ê®°Âºè
  17   1      }
  18          
  19          extern void cap_timer(void);
  20          extern void l_pwr_timer_handler(void);
  21          extern void t_ctrl_timer_handler(void);
  22          extern void dly_pwr_on_handler(void);
  23          extern void ex_temp_adjust_timer();
  24          extern void adc_val();
  25          u16 ms_cnt = 0;
  26          void TIMR0_IRQHandler(void) interrupt TMR0_IRQn
  27          {
  28   1          // ËøõÂÖ•‰∏≠Êñ≠ËÆæÁΩÆIPÔºå‰∏çÂèØÂà†Èô§
  29   1          __IRQnIPnPush(TMR0_IRQn);
  30   1      
  31   1          // ---------------- Áî®Êà∑ÂáΩÊï∞Â§ÑÁêÜ -------------------
  32   1      
  33   1          // Âë®Êúü‰∏≠Êñ≠
  34   1          if (TMR0_CONH & TMR_PRD_PND(0x1))
  35   1          {
  36   2              TMR0_CONH |= TMR_PRD_PND(0x1); // Ê∏ÖÈô§pending
  37   2      
  38   2              if (adjust_pwm_during_pwr_on < 255) // Èò≤Ê≠¢ËÆ°Êï∞Ê∫¢Âá∫
  39   2              {
  40   3                  adjust_pwm_during_pwr_on++;
  41   3              }
  42   2      
  43   2              // // ÊµãËØïÁî®:
  44   2              // if (user_debug_ms_cnt < 255)
  45   2              // {
  46   2              //     user_debug_ms_cnt++;
  47   2              // }
  48   2      
  49   2              cap_timer();
  50   2              adc_val();
  51   2              ms_cnt++;
C51 COMPILER V9.60.7.0   MY_TIMER                                                          09/08/2025 11:42:23 PAGE 2   

  52   2              if (ms_cnt >= 1000) // ÊµãËØï
  53   2              {
  54   3                  ms_cnt = 0;
  55   3                  ex_temp_adjust_timer(); // ËøáÊ∏©ÈôçÂäüÁéá maxÂÄºÁî±ËøáÊ∏©ÁöÑÂÜ≥ÂÆö
  56   3                  t_ctrl_timer_handler();
  57   3                  l_pwr_timer_handler();
  58   3                  dly_pwr_on_handler();
  59   3              }
  60   2          }
  61   1      
  62   1          // ÈÄÄÂá∫‰∏≠Êñ≠ËÆæÁΩÆIPÔºå‰∏çÂèØÂà†Èô§
  63   1          __IRQnIPnPop(TMR0_IRQn);
  64   1      }
  65          
  66          void pwm_init(void)
  67          {
  68   1      // ÈÖçÁΩÆTIMER4ÁöÑPWMÁ´ØÂè£ÔºöP21--TMR4_PWM
  69   1      #if 0
                              P1_MD1   &= ~GPIO_P15_MODE_SEL(0x03);
                 P1_MD1   |=  GPIO_P15_MODE_SEL(0x01);
                 FOUT_S15  =  GPIO_FOUT_TMR2_PWMOUT;                         // ÈÄâÊã©tmr4_pwm_o
              
              
                              P1_MD1   &= ~GPIO_P16_MODE_SEL(0x03);
                  P1_MD1   |=  GPIO_P16_MODE_SEL(0x01);
                  FOUT_S16  =  GPIO_FOUT_TMR2_PWMOUT;                         // ÈÄâÊã©tmr4_pwm_o
              
              #define PEROID_PWM (SYSCLK / 8000 - 1) // Âë®ÊúüÂÄº=Á≥ªÁªüÊó∂Èíü/ÂàÜÈ¢ë/È¢ëÁéá - 1
              
                  // ÈÖçÁΩÆÈ¢ëÁéá‰∏∫1kHZÁöÑPWM    PWMÈ¢ëÁéá=Á≥ªÁªüÊó∂Èíü/ÂàÜÈ¢ë/(Âë®ÊúüÂÄº+1)
                  TMR_ALLCON = TMR2_CNT_CLR(0x1);                                                // Ê∏ÖÈô§ËÆ°Êï∞ÂÄº
              
                  TMR2_PRH   = TMR_PERIOD_VAL_H((PEROID_PWM >> 8) & 0xFF);                       // Âë®ÊúüÂÄº
                  TMR2_PRL   = TMR_PERIOD_VAL_L((PEROID_PWM >> 0) & 0xFF);
              
              
                              
                  TMR2_PWMH  = TMR_PWM_VAL_H(((5999) >> 8) & 0xFF);                      // Âç†Á©∫ÊØîËÆæÁΩÆÂÄº
                  TMR2_PWML  = TMR_PWM_VAL_L(((5999) >> 0) & 0xFF);
              
                  TMR2_CONL  = TMR_SOURCE_SEL(0x7) | TMR_PRESCALE_SEL(0) | TMR_MODE_SEL(0x2);  // ÈÄâÊã©Á≥ªÁªüÊó∂ÈíüÔºå1
             -28ÂàÜÈ¢ëÔºåPWMÊ®°Âºè
              
                  TMR2_CONH  = TMR_PRD_PND(0x1)   | TMR_PRD_IRQ_EN(0x1);                         // ‰ΩøËÉΩËÆ°Êï∞‰∏≠Êñ≠
              #endif
  96   1      
  97   1      #if 1
  98   1      
  99   1      #define STMR0_PEROID_VAL (SYSCLK / 8000 - 1)
 100   1          STMR0_PSC = STMR_PRESCALE_VAL(0x07);
 101   1          STMR0_PRH = STMR_PRD_VAL_H((STMR0_PEROID_VAL >> 8) & 0xFF);
 102   1          STMR0_PRL = STMR_PRD_VAL_L((STMR0_PEROID_VAL >> 0) & 0xFF);
 103   1          STMR0_CMPAH = STMR_CMPA_VAL_H(((0) >> 8) & 0xFF); // ÊØîËæÉÂÄº
 104   1          STMR0_CMPAL = STMR_CMPA_VAL_L(((0) >> 0) & 0xFF); // ÊØîËæÉÂÄº
 105   1          // STMR_PWMVALA &= ~STMR_0_PWMVALA(0x1);
 106   1          STMR_PWMVALA |= STMR_0_PWMVALA(0x1);
 107   1      
 108   1          STMR_CNTMD |= STMR_0_CNT_MODE(0x1); // ËøûÁª≠ËÆ°Êï∞Ê®°Âºè
 109   1          STMR_LOADEN |= STMR_0_LOAD_EN(0x1); // Ëá™Âä®Ë£ÖËΩΩ‰ΩøËÉΩ
 110   1          STMR_CNTCLR |= STMR_0_CNT_CLR(0x1); //
 111   1          STMR_CNTEN |= STMR_0_CNT_EN(0x1);   // ‰ΩøËÉΩ
 112   1          STMR_PWMEN |= STMR_0_PWM_EN(0x1);   // PWMËæìÂá∫‰ΩøËÉΩ
C51 COMPILER V9.60.7.0   MY_TIMER                                                          09/08/2025 11:42:23 PAGE 3   

 113   1          P1_MD1 &= ~GPIO_P16_MODE_SEL(0x03);
 114   1          P1_MD1 |= GPIO_P16_MODE_SEL(0x01);
 115   1          FOUT_S16 = GPIO_FOUT_STMR0_PWMOUT;
 116   1      #endif
 117   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    235    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
